{"version":3,"sources":["scripts/main.js"],"names":["fieldRows","document","querySelector","rows","scoreBoard","startBtn","messageStart","messageWin","messageLose","columns","score","field","updateGame","row","col","updateCell","cells","innerText","String","cell","num","classList","value","add","isEmpty","isPossible","check","setNewCell","Math","random","floor","filterRow","filter","el","slide","newRow","i","length","isFinite","isWin","push","slideLeft","r","slideRight","reverse","slideUp","slideDown","remove","isLose","addEventListener","type","contains","code"],"mappings":"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","file":"main.a422b140.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst fieldRows = document.querySelector('tbody').rows;\nconst scoreBoard = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.start');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\n\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartBtn.addEventListener('click', () => {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  updateGame();\n  setNewCell();\n  setNewCell();\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  startBtn.classList.add('restart');\n  startBtn.innerText = 'Restart';\n});\n\ndocument.addEventListener('keyup', (type) => {\n  if (startBtn.classList.contains('restart')) {\n    if (type.code === 'ArrowLeft') {\n      slideLeft();\n      setNewCell();\n    }\n\n    if (type.code === 'ArrowRight') {\n      slideRight();\n      setNewCell();\n    }\n\n    if (type.code === 'ArrowUp') {\n      slideUp();\n      setNewCell();\n    }\n\n    if (type.code === 'ArrowDown') {\n      slideDown();\n      setNewCell();\n    }\n  }\n\n  if (!isPossible()) {\n    isLose();\n  }\n});\n\nfunction updateGame() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      const currentCell = fieldRows[row].cells[col];\n      const num = field[row][col];\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  scoreBoard.innerText = String(score);\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = String(num);\n    cell.classList.add(`field-cell--${String(num)}`);\n  }\n}\n\nfunction isEmpty() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (field[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isPossible() {\n  let check = false;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (row < 3) {\n        if (field[row][col] === field[row + 1][col]\n          || field[row][col] === field[row][col + 1]) {\n          check = true;\n        }\n      } else {\n        if (field[row][col] === field[row][col + 1]) {\n          check = true;\n        }\n      }\n    }\n  }\n\n  if (!check && !isEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction setNewCell() {\n  if (!isEmpty()) {\n    return;\n  }\n\n  const value = Math.random() > 0.1 ? 2 : 4;\n\n  let check = false;\n\n  while (!check) {\n    const row = Math.floor(Math.random() * rows);\n    const col = Math.floor(Math.random() * columns);\n\n    if (field[row][col] === 0) {\n      field[row][col] = value;\n      check = true;\n\n      updateGame();\n    }\n  }\n}\n\nfunction filterRow(row) {\n  return row.filter(el => el !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterRow(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      isWin(newRow[i]);\n    }\n  }\n\n  newRow = filterRow(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row = slide(row);\n    field[r] = row;\n  }\n\n  updateGame();\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[r] = row;\n  }\n\n  updateGame();\n}\n\nfunction slideUp() {\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row = slide(row);\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n\n  updateGame();\n}\n\nfunction slideDown() {\n  for (let col = 0; col < columns; col++) {\n    let row = [field[0][col], field[1][col], field[2][col], field[3][col]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let i = 0; i < columns; i++) {\n      field[i][col] = row[i];\n    }\n  }\n\n  updateGame();\n}\n\nfunction isWin(value) {\n  if (value === 2048) {\n    messageWin.classList.remove('hidden');\n    startBtn.classList.remove('restart');\n    startBtn.innerText = 'Start';\n  }\n}\n\nfunction isLose() {\n  messageLose.classList.remove('hidden');\n  startBtn.classList.remove('restart');\n  startBtn.innerText = 'Start';\n}\n"]}